HLX Performance Example - Inserting 100,000 documents
============================================================
This example demonstrates HLX performance by:
  • Creating 100,000 test documents
  • Inserting them in batches of 1,000
  • Measuring insertion and search performance
  • Comparing memory vs file-based storage

Usage: go run performance.go -tags fts5


Memory Database (:memory:)
----------------------------------------
Generating 100,000 test documents... Done in 68.293817ms
Inserting documents in batches of 1000...
  Progress: 10.0% (10/100 batches) - Avg batch time: 36.928142ms
  Progress: 20.0% (20/100 batches) - Avg batch time: 39.776163ms
  Progress: 30.0% (30/100 batches) - Avg batch time: 41.542528ms
  Progress: 40.0% (40/100 batches) - Avg batch time: 43.135197ms
  Progress: 50.0% (50/100 batches) - Avg batch time: 45.233407ms
  Progress: 60.0% (60/100 batches) - Avg batch time: 46.578649ms
  Progress: 70.0% (70/100 batches) - Avg batch time: 49.964956ms
  Progress: 80.0% (80/100 batches) - Avg batch time: 50.049161ms
  Progress: 90.0% (90/100 batches) - Avg batch time: 50.822703ms
  Progress: 100.0% (100/100 batches) - Avg batch time: 52.604964ms
Testing search performance... Found 100000 results in 224.823065ms

📊 Performance Statistics:
  ⏱️  Index creation time:     894.288µs
  📝 Document generation:     68.293817ms
  💾 Total insertion time:    5.260954618s
  🚀 Time per document:       52.609µs (52.61 μs)
  📈 Throughput:              19007.96 docs/sec
  🔍 Search time:             224.823065ms
  📊 Total documents:         100000
  📦 Batch size:              1000
  🔢 Total batches:           100
  💽 Estimated data size:     38.15 MB

File Database (performance_test.db)
----------------------------------------
Generating 100,000 test documents... Done in 50.914233ms
Inserting documents in batches of 1000...
  Progress: 10.0% (10/100 batches) - Avg batch time: 128.737475ms
  Progress: 20.0% (20/100 batches) - Avg batch time: 129.537858ms
  Progress: 30.0% (30/100 batches) - Avg batch time: 133.505812ms
  Progress: 40.0% (40/100 batches) - Avg batch time: 135.508994ms
  Progress: 50.0% (50/100 batches) - Avg batch time: 170.672361ms
  Progress: 60.0% (60/100 batches) - Avg batch time: 196.70735ms
  Progress: 70.0% (70/100 batches) - Avg batch time: 220.197064ms
  Progress: 80.0% (80/100 batches) - Avg batch time: 231.130282ms
  Progress: 90.0% (90/100 batches) - Avg batch time: 242.153163ms
  Progress: 100.0% (100/100 batches) - Avg batch time: 258.32305ms
Testing search performance... Found 100000 results in 250.592079ms

📊 Performance Statistics:
  ⏱️  Index creation time:     9.621458ms
  📝 Document generation:     50.914233ms
  💾 Total insertion time:    25.832477512s
  🚀 Time per document:       258.324µs (258.32 μs)
  📈 Throughput:              3871.10 docs/sec
  🔍 Search time:             250.592079ms
  📊 Total documents:         100000
  📦 Batch size:              1000
  🔢 Total batches:           100
  💽 Estimated data size:     38.15 MB
  🗃️  Database file size:      73.53 MB

============================================================
Performance comparison completed!
Note: Memory database is faster but data is not persistent.
File database is slower but provides data persistence.
